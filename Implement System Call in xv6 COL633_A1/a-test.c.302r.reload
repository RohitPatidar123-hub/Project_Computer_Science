
;; Function main (main, funcdef_no=0, decl_uid=4826, cgraph_uid=1, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 31
New elimination table:
Can eliminate 65 to 31 (offset=32, prev_offset=0)
Can eliminate 65 to 29 (offset=32, prev_offset=0)
Can eliminate 64 to 31 (offset=32, prev_offset=0)
Can eliminate 64 to 29 (offset=32, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 5:  (0) r  (1) M {*movsi_aarch64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=6,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 6:  (0) m  (1) rZ {*movsi_aarch64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 7:  (0) r  (1) m {*movsi_aarch64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=7: Bad operand -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=8,overall=22,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=9,overall=22,losers=2,rld_nregs=1
            alt=10: Bad operand -- refuse
            alt=11: Bad operand -- refuse
          alt=12,overall=0,losers=0,rld_nregs=0
	 Choosing alt 12 in insn 8:  (0) r  (1) Ush {*movdi_aarch64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) r  (2) S {add_losym_di}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (1) Usf {*call_value_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) M {*movsi_aarch64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) r {*movsi_aarch64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) r {*movsi_aarch64}
	   Spilling non-eliminable hard regs: 31

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 19: point = 0, n_alt = -1
   Insn 18: point = 0, n_alt = 0
   Insn 14: point = 1, n_alt = 0
   Insn 11: point = 3, n_alt = 3
   Insn 10: point = 4, n_alt = 1
   Insn 9: point = 4, n_alt = 0
   Insn 8: point = 5, n_alt = 12
   Insn 7: point = 6, n_alt = 6
   Insn 6: point = 6, n_alt = 8
   Insn 5: point = 7, n_alt = 3
 r92: [2..3]
 r93: [0..1]
 r94: [6..7]
 r95: [4..5]
Compressing live ranges: from 8 to 8 - 100%
Ranges after the compression:
 r92: [2..3]
 r93: [0..1]
 r94: [6..7]
 r95: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 31
	   Spilling non-eliminable hard regs: 31
New elimination table:
Can eliminate 65 to 31 (offset=32, prev_offset=32)
Can eliminate 65 to 29 (offset=32, prev_offset=0)
Can eliminate 64 to 31 (offset=32, prev_offset=32)
Can eliminate 64 to 29 (offset=32, prev_offset=0)
changing reg in insn 11
changing reg in insn 14
changing reg in insn 14
changing reg in insn 18
changing reg in insn 5
changing reg in insn 6
changing reg in insn 8
changing reg in insn 9
deleting insn with uid = 14.
deleting insn with uid = 18.
starting the processing of deferred insns
ending the processing of deferred insns


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 67 [vg] 68 [p0] 69 [p1] 70 [p2] 71 [p3] 72 [p4] 73 [p5] 74 [p6] 75 [p7] 76 [p8] 77 [p9] 78 [p10] 79 [p11] 80 [p12] 81 [p13] 82 [p14] 83 [p15] 84 [ffr] 85 [ffrt]
;;  hardware regs used 	
;;  regular block artificial uses 	 31 [sp]
;;  eh block artificial uses 	 31 [sp] 65 [ap]
;;  entry block defs 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 68 [p0] 69 [p1] 70 [p2] 71 [p3]
;;  exit block uses 	 0 [x0] 31 [sp]
;;  regs ever live 	 0 [x0] 1 [x1] 16 [x16] 17 [x17] 30 [x30] 31 [sp]
;;  ref usage 	r0={6d,5u} r1={3d,1u} r2={2d} r3={2d} r4={2d} r5={2d} r6={2d} r7={2d} r8={2d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={2d} r17={2d} r18={1d} r30={2d} r31={1d,5u} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r66={1d} r67={1d} r68={2d} r69={2d} r70={2d} r71={2d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} 
;;    total ref usage 105{94d,11u,0e} in 8{7 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(31){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 67 [vg] 68 [p0] 69 [p1] 70 [p2] 71 [p3] 72 [p4] 73 [p5] 74 [p6] 75 [p7] 76 [p8] 77 [p9] 78 [p10] 79 [p11] 80 [p12] 81 [p13] 82 [p14] 83 [p15] 84 [ffr] 85 [ffrt] 92 93 94 95
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 0 x0 [94])
        (const_int 4 [0x4])) "test.c":3:9 64 {*movsi_aarch64}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 31 sp)
                (const_int 28 [0x1c])) [1 a+0 S4 A32])
        (reg:SI 0 x0 [94])) "test.c":3:9 64 {*movsi_aarch64}
     (nil))
(insn 7 6 8 2 (set (reg:SI 1 x1)
        (mem/c:SI (plus:DI (reg/f:DI 31 sp)
                (const_int 28 [0x1c])) [1 a+0 S4 A32])) "test.c":4:5 64 {*movsi_aarch64}
     (nil))
(insn 8 7 9 2 (set (reg:DI 0 x0 [95])
        (high:DI (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0xe081999603f0 *.LC0>))) "test.c":4:5 65 {*movdi_aarch64}
     (nil))
(insn 9 8 10 2 (set (reg:DI 0 x0)
        (lo_sum:DI (reg:DI 0 x0 [95])
            (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0xe081999603f0 *.LC0>))) "test.c":4:5 1116 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0xe081999603f0 *.LC0>)
        (nil)))
(call_insn 10 9 11 2 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0xe08199b28400 printf>) [0 __builtin_printf S8 A8])
                    (const_int 0 [0])))
            (unspec:DI [
                    (const_int 0 [0])
                ] UNSPEC_CALLEE_ABI)
            (clobber (reg:DI 30 x30))
        ]) "test.c":4:5 59 {*call_value_insn}
     (nil)
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (nil))))))
(insn 11 10 19 2 (set (reg:SI 0 x0 [orig:92 _4 ] [92])
        (const_int 1 [0x1])) "test.c":5:12 64 {*movsi_aarch64}
     (nil))
(insn 19 11 21 2 (use (reg/i:SI 0 x0)) "test.c":6:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

(note 21 19 0 NOTE_INSN_DELETED)
